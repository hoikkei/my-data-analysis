#首先看一下产品明细表，知道我们数据库内现有的产品划分，找到与我们理想分类间的差异。
select count(distinct ItemName) as item_num,
food_type 
from ds_indian_restaurants_products_type
group by food_type
order by item_num desc;


#在现有的产品明细表里重新定义一列字段，作为我们就餐人数判断的产品分类
drop table if exists pj_indian_food_category;
create table pj_indian_food_category as
select ItemName as item_name,`Product Price` as price,brand_tag,food_type,
case when food_type in ('鸡肉类食品','羊肉类食品','明虾类食品','咖喱','馕饼类主食','饭','鱼肉类食品','烧烤') then '主食' 
when food_type in ('水','可乐','酒','啤酒','葡萄酒','柠檬汽水') then '饮料'
when food_type in ('油炸小食','豆腐','蔬菜','薯类食品','小食','豆类','色拉','开胃菜') then '小食'
else '佐料' end as food_category
from ds_indian_restaurants_products_type;


#再来看一下重新定义过后产品的分类情况
select count(distinct item_name) as item_num,food_category,food_type
from pj_indian_food_category
group by food_category,food_type
order by food_category,food_type,item_num desc;

#将交易明细表与我们刚定义的产品明细表进行关联,把产品分类和价格加入明细当中
select a.*,b.food_category,b.price
from ds_indian_restaurants_orders a join pj_indian_food_category b 
on a.`Item Name`=b.item_name and a.brand_tag=b.brand_tag;

#目前一行记录是一笔订单的一种产品的售卖情况，如果一笔订单有若干样产品会分成若干行，我们希望把一笔订单的详情，从多行统一到一行中，同时用我们事先定义的系数计算。
select a.`Order Number`,a.`Order Date`,a.brand_tag,round(sum(a.Quantity*b.price),2) as total_amount,
sum(case when food_category='主食' then a.Quantity*1 else 0 end) as main_count,
sum(case when food_category='饮料' then a.Quantity*1 else 0 end) as drink_count,
sum(case when food_category='小食' then a.Quantity*0.5 else 0 end) as side_count
from ds_indian_restaurants_orders a join pj_indian_food_category b 
on a.`Item Name`=b.item_name and a.brand_tag=b.brand_tag
group by a.`Order Number`,a.`Order Date`,a.brand_tag;

#比较主食，饮料，小食中的最大者
select c.*,greatest(c.main_count,c.drink_count,c.side_count) as max_count from 
(select a.`Order Number`,a.`Order Date`,round(sum(a.Quantity*b.price),2) as total_amount,
sum(case when food_category='主食' then a.Quantity*1 else 0 end) as main_count,
sum(case when food_category='饮料' then a.Quantity*1 else 0 end) as drink_count,
sum(case when food_category='小食' then a.Quantity*0.5 else 0 end) as side_count
from ds_indian_restaurants_orders a join pj_indian_food_category b 
on a.`Item Name`=b.item_name and a.brand_tag=b.brand_tag
group by a.`Order Number`,a.`Order Date`) c;

#最后，增加向下取整的逻辑，并且确保最小就餐人数为1；
select c.*,
greatest(floor(greatest(c.main_count,c.drink_count,c.side_count)),1) as derived_party_size from 
(select a.`Order Number`,a.`Order Date`,a.brand_tag,round(sum(a.Quantity*b.price),2) as total_amount,
sum(case when food_category='主食' then a.Quantity*1 else 0 end) as main_count,
sum(case when food_category='饮料' then a.Quantity*1 else 0 end) as drink_count,
sum(case when food_category='小食' then a.Quantity*0.5 else 0 end) as side_count
from ds_indian_restaurants_orders a join pj_indian_food_category b 
on a.`Item Name`=b.item_name and a.brand_tag=b.brand_tag
group by a.`Order Number`,a.`Order Date`,a.brand_tag) c;

#新建一张表格，将两家店每一笔交易的时间，金额，就餐人数，主食，饮料，小食数存储进去
drop table if exists pj_indian_food_partysize;
create table pj_indian_food_partysize as
select c.*,
greatest(floor(greatest(c.main_count,c.drink_count,c.side_count)),1) as derived_party_size from 
(select a.`Order Number`,a.`Order Date`,a.brand_tag,round(sum(a.Quantity*b.price),2) as total_amount,
sum(case when food_category='主食' then a.Quantity*1 else 0 end) as main_count,
sum(case when food_category='饮料' then a.Quantity*1 else 0 end) as drink_count,
sum(case when food_category='小食' then a.Quantity*0.5 else 0 end) as side_count
from ds_indian_restaurants_orders a join pj_indian_food_category b 
on a.`Item Name`=b.item_name and a.brand_tag=b.brand_tag
group by a.`Order Number`,a.`Order Date`,a.brand_tag) c;

#检查一下之前担心的饮料过多导致的推测异常占比
select count(case when drink_count>=5 then `order number` else null end) as abnormal_tc,
count(*) as total_tc,
round(count(case when drink_count>=5 then `order number` else null end)/count(*),5) as abnormal_rate
from pj_indian_food_partysize;

#有了就餐人数之后，我们能做些什么分析呢，抛砖引玉
select brand_tag,avg(derived_party_size) as avg_ps,avg(total_amount) as ta,
avg(total_amount/derived_party_size) as avg_spc,avg(main_count/derived_party_size) as avg_main,
avg(drink_count/derived_party_size) as avg_drink,avg(side_count/derived_party_size) as avg_side
from pj_indian_food_partysize
group by brand_tag;